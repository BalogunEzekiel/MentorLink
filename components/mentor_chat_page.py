import streamlit as st

import time

from utils.mentorchat import mentorchatÂ  # Ensure this is the updated chatbot logic



def show_mentor_chat():

Â  Â  st.markdown("## ðŸ¤– MentorChat Assistant")



Â  Â  # Initialize chat history

Â  Â  if "chat_history" not in st.session_state:

Â  Â  Â  Â  st.session_state.chat_history = []



Â  Â  # Get user input

Â  Â  user_input = st.chat_input("Ask MentorChat anything...")



Â  Â  # Get user role

Â  Â  role = st.session_state.get("role", "Public")



Â  Â  # If input submitted

Â  Â  if user_input:

Â  Â  Â  Â  # Save user message

Â  Â  Â  Â  st.session_state.chat_history.append(("user", user_input))



Â  Â  Â  Â  # Add placeholder for bot response (will be replaced during typing)

Â  Â  Â  Â  st.session_state.chat_history.append(("bot", "...typing..."))



Â  Â  Â  Â  # Rerun to show user message first, then simulate bot response

Â  Â  Â  Â  st.session_state["pending_response"] = {

Â  Â  Â  Â  Â  Â  "input": user_input,

Â  Â  Â  Â  Â  Â  "role": role

Â  Â  Â  Â  }

Â  Â  Â  Â  st.rerun()



Â  Â  # Check if bot response needs to be generated

Â  Â  if "pending_response" in st.session_state:

Â  Â  Â  Â  user_input = st.session_state["pending_response"]["input"]

Â  Â  Â  Â  role = st.session_state["pending_response"]["role"]



Â  Â  Â  Â  # Remove the "...typing..." placeholder

Â  Â  Â  Â  if st.session_state.chat_history and st.session_state.chat_history[-1][1] == "...typing...":

Â  Â  Â  Â  Â  Â  st.session_state.chat_history.pop()



Â  Â  Â  Â  # Generate response

Â  Â  Â  Â  bot_response = mentorchat(user_input, user_role=role)

Â  Â  Â  Â  st.session_state.chat_history.append(("bot", bot_response))



Â  Â  Â  Â  # Clean up

Â  Â  Â  Â  del st.session_state["pending_response"]



Â  Â  Â  Â  # Rerun again to display animated typing

Â  Â  Â  Â  st.rerun()



Â  Â  # Display chat history

Â  Â  for sender, message in st.session_state.chat_history:

Â  Â  Â  Â  if sender == "user":

Â  Â  Â  Â  Â  Â  with st.chat_message("user"):

Â  Â  Â  Â  Â  Â  Â  Â  st.write(message)

Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  with st.chat_message("assistant"):

Â  Â  Â  Â  Â  Â  Â  Â  if message == st.session_state.chat_history[-1][1]:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  simulate_typing(message)Â  # Typing simulation only for latest

Â  Â  Â  Â  Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  st.write(message)



# ðŸ”„ Typing Simulation

def simulate_typing(response: str, delay: float = 0.02):

Â  Â  displayed = ""

Â  Â  message_placeholder = st.empty()



Â  Â  for char in response:

Â  Â  Â  Â  displayed += char

Â  Â  Â  Â  message_placeholder.markdown(displayed + "â–Œ")

Â  Â  Â  Â  time.sleep(delay)



Â  Â  message_placeholder.markdown(displayed)Â  # Final text
